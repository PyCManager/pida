= PIDA Handbook


//////////////////////////////////////////////////////////////////////////////
Please note here typo or documentation format rules that should be consistent
throughout the whole document.

- PIDA should always be written PIDA for now. A find and replace will change
   this if necessary.

- The attitude of the writer (using first person, using 'you' or 'the user' to
   speak about the reader...) should be consistent throughout the whole
   document. It is not decided what this attitude shall be yet.

- Anchors should be explicit and composed using the hierarchy of the document
   ie: services_project_manager for Project Manager title in Services.
//////////////////////////////////////////////////////////////////////////////


PIDA is an IDE (integrated development environment). PIDA is different from
other IDEs in that it will use the tools that are already available rather than
attempting to reinvent each one. PIDA is written in Python with the PyGTK
toolkit, and although it is designed to be used to program in any language, PIDA
has fancy Python IDE features.

This document describes PIDA features and usage. It is aimed at providing help
for new comers and advanced users. Developer documentation is available in other
sources for those who want to hack PIDA.

CAUTION: Since PIDA is still being actively worked on, this manual is still
incomplete and will grow with time.


[#pida on freenode.net]
_________________________________________________________
[verse]
.........................................................
<tito> aa_: PIDA is an acronym ?
<Zapek> PIDA Is Da Acronym
<mnemoc> Python Integrated Developmenet Architecture iirc
<aa_> Zapek: I like it
.........................................................
_________________________________________________________

[[introduction]]
Introduction
------------
There are many IDE around, and some are very good. But lots of them are also
_closed_ in the sense that they are limited in terms of extensibility or
communication with other tools. On the other hand, some of you may want to
change your editor for anything else, even if you have to rely on external tools
to complete its features.

PIDA was designed with these problems in mind. PIDA's _motto_ is to reuse the
tools that proved to be useful and solid, and to provide the glue for them. PIDA
is written in Python with *PyGTK*, is easily extensible through plug-ins and can
embed any editor provided someone writes an adapter for it.

PIDA has a number of unique features, such as

- Embedding Vim, Emacs or any editor.
footnote:[Of course, the editor has to provide a way to communicate with for
external programs. *Moo*, *Scite*, and probably *GEdit* could be candidates]
- Using any version control system.


------------------------------------------------------------------------------
run-pida.sh
------------------------------------------------------------------------------

=== Obtaining the development source code


[[installation_packages]]

[[getting_started]]
Getting started
---------------
FIXME.

[[getting_started_wizard]]
First run wizard
~~~~~~~~~~~~~~~~
NOTE: This feature is planned for a future version of PIDA, which is still undetermined yet.

[[getting_started_window]]
The PIDA window
~~~~~~~~~~~~~~~
Like any other IDE, PIDA provides in one window all the tools you need to edit
your files, compile your programs, invoke external tools, explore a project
space or a file hierarchy, and so on. The PIDA window is organized with a menu,
a toolbar, multiple views and a status bar. Many of these elements are optional
and can be hidden or displayed at will.

The menu bar
^^^^^^^^^^^^
*File*::
This menu offers all file related operations, like creating, saving, or closing
a document, but also all version control operations. PIDA also provides sessions
management, and the *File* menu permits to save the current session or load a
previous one.

*Edit*::
This menu serves two purposes. First, it provides facilities to search documents
throughout a project, or directories. But PIDA preferences and shortcuts
settings are also modifiable from here.

*Project*::
This menu provides version control at project level. From there, it is also
possible to modify the properties of a project and to start the configured
controllers.

*Tools*::
Additional utilities, like a terminal and a Python shell for PIDA introspection.

*View*::
The PIDA window can be customized from there, displaying or hiding special views
or elements like the menu bar or the tool bar. This menu also provides shortcuts
to access quickly the most important views of the window, like the file
manager.

*Help*::
Provides only the credits window for now.

The status bar
^^^^^^^^^^^^^^
The status bar provides live information on

- The current project.
- The current directory browsed in the file manager.
- Information on t file currently edited, like its name, encoding and size.

The editor
^^^^^^^^^^
The editor is the core element of PIDA. All other views only provide utilities
to fill the missing features of the editor, or integrate important accessories
-- like a debugger -- or give a quick access to external tools -- like a
terminal. The editor is also the central view of PIDA. All other views can be
moved around it (see xref:getting_started_window_views[See Views]).

PIDA can support any editor. Editor shortcuts and features directly depend on
what editor you prefer. It is possible that some features of the chosen editor
and PIDA features overlap. In this case, both can be used, but the feature
implemented by PIDA will certainly provide better integration with the other
tools of the IDE.

[[getting_started_window_views]]
Views
^^^^^
All elements in the PIDA window, except the editor, the menu bar, the toolbar
and status bar, can be moved (remember that the menu bar and the toolbar can be
hidden though).

FIXME: must choose carefully the vocabulary for elements of the views and keep them consistent.

[[getting_started_configuration]]
PIDA configuration
~~~~~~~~~~~~~~~~~~
FIXME: gconf, .pida


== PIDA Service Authoring Guide

PIDA has a very general concept of services (you might call them plugins in
another application). In general, a service is able to define any PIDA
function, that is anything PIDA can do, a service can do it too.

PIDA is essentially a bunch of services bound together by a *Boss*. The
services are discovered from service directories and loaded by a *Service
Manager* for the Boss.



=== Service Views


== PIDA Plugin Authoring Guide

PIDA plugins are very much identical to Services. Anything you can do in a
Service, you can also do in a Plugin. There are however a few minor
differences, based on the facts that:

    1. Plugins can be loaded and unlaoded at runtime
    2. Plugins can be published on the PIDA community and installed

PIDA uses Plugins for all non-core funcitonality, and we have been quite
strict about this, so that we can maintain a different release schedule for
the core, and individual plugins. Because of this, Plugins which you might
expect to find in a standard IDE or a standard Python IDE must be installed.
Fortunately this is a matter of a single click.

=== The service.pida file

The service.pida file in Plugins is in the _ini_ format with themetadata under
the [plugin] tag. It contains metadata that is used by the
installer and by the community website. This metadata includes:

.Service.pida metadata
[grid="all"]
'-------------'---------------------------------------------------------------
Attribute       Description
------------------------------------------------------------------------------
plugin * 	    Technical name of plugin (only [a-z0-9_] name)
name * 	        Long name of plugin
version * 	    Version of plugin
author * 	    Name of author <email>
require_pida * 	Version of PIDA
category * 	    Category of plugins
depends 	    List of dependencies
lastupdate 	    Date of last update 	
website 	    Website of plugin
------------------------------------------------------------------------------

_* These fields are mandatory_

.An example service.pida file
------------------------------------------------------------------------------
[plugin]
plugin = snippets
name = Snippets
author = Ali Afshar <aafshar@gmail.com>
version = 0.1
require_pida = 0.5
depends = ""
category = code
description = Snippets: automatically enter repetitive text
------------------------------------------------------------------------------
