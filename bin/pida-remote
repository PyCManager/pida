#! /usr/bin/env python

import os
import sys
from os.path import normpath, abspath, join, exists, dirname

curfile = __file__
while os.path.islink(curfile):
    curfile = os.readlink(curfile)
bin = dirname(curfile)
base = dirname(bin)

if exists(join(base, 'pida', '__init__.py')):
    sys.path.insert(0, base)

externals = join(base, 'externals')
if exists(externals):
    sys.path.insert(0, externals)
os.environ['PIDA_PATH'] = bin
import pida


from pida.utils.pdbus import list_pida_instances, PidaRemote
from pida.core import environment
import dbus
import dbus.service

session = dbus.SessionBus()
lst = list_pida_instances()


environment.parse_args(sys.argv[1:])

file_names = [abspath(x) for x in environment.opts.files]
def spawn(workspace=None):
    #XXX: this seems somehow ugly
    import subprocess
    cmd = sys.argv[0]
    if cmd[-11:] == "pida-remote":
        cmd = cmd[:-7]
    nargs = [cmd] + file_names
    if workspace:
        nargs.extend(['-w', workspace])
    subprocess.Popen(nargs, env=os.environ.copy())

def call_open(pid):
    from pida.utils.pdbus import PidaRemote

    pr = PidaRemote(pid)
    if file_names:
        pr.call('buffer', 'open_files', file_names)

    pr.call('appcontroller', 'focus_window')

    sys.exit(0)

def command(sw, row=None):
    # the command dispatcher
    if sw.user_action == "quit":
        sys.exit(0)
    elif sw.user_action == "new" and sw.new_workspace:
        spawn(sw.new_workspace)
        sys.exit(0)
    elif sw.user_action == "select":
        if row.id:
            call_open(row.id)
        else:
            spawn(row.workspace)
            sys.exit(0)

def open_workspace():
    from pida.ui.workspace import WorkspaceWindow
    view = WorkspaceWindow(command=command)
    view.show_and_run()
    sys.exit(0)

from pida.core import options

if environment.workspace_manager() or options.must_open_workspace_manager():
    open_workspace()
elif environment.workspace_set():
    for i in lst:
        pr = PidaRemote(i[0])
        try:
            name = pr.call('appcontroller', 'get_workspace_name')
        except:
            name = "default"

        if name == environment.workspace_name():
            pr.call('buffer', 'open_files', file_names)
            sys.exit(0)
    spawn(None, session=environment.workspace_name()) 
elif len(lst) == 0:
    spawn(None)
elif len(lst) == 1:
    call_open('p%d' % lst[0]['pid'])
else:
    open_workspace()
