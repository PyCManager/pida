#! /usr/bin/env python

import os, sys

import pida

from dbus.mainloop.glib import DBusGMainLoop
DBusGMainLoop(set_as_default=True)

os.environ['PIDA_PATH'] = os.path.dirname(os.path.abspath(pida.__file__))

from pida.utils.pdbus import BUS_NAME, DBUS_NS, DBUS_PATH_PREFIX, \
                            list_pida_instances, PidaRemote
from pida.core import environment
import dbus
import dbus.service
import re

session = dbus.SessionBus()

# check if pida is running
lst = list_pida_instances(block=True)


environment.parse_args(sys.argv)

file_names = []

for i in environment.get_args()[1:]:
    file_names.append(os.path.abspath(i))


def spawn(session=None):
    #XXX: this seems somehow ugly. but i have no idea how to spawn this correctly
    import subprocess
    nargs = [sys.argv[0]] + file_names
    for i in xrange(len(nargs)):
        v = nargs[i]
        if v[-11:] == "pida-remote":
            nargs[i] = v[:-7]
    if session:
        nargs += ['-s', session]
    subprocess.Popen(nargs, env=os.environ.copy()).pid

def call_open(pid):
    from pida.utils.pdbus import PidaRemote

    pr = PidaRemote(pid)
    if file_names:
        pr.call('buffer', 'open_files', file_names)

    pr.call('boss', 'focus_window')

    sys.exit(0)

def command(sw, row=None):
    # the command dispatcher
    if sw.user_action == "quit":
        sys.exit(0)
    elif sw.user_action == "new" and sw.new_session:
        spawn(sw.new_session)
        sys.exit(0)
    elif sw.user_action == "select":
        if row[0]:
            call_open(row[0])
        else:
            spawn(row[3])
            sys.exit(0)

def open_session():
    from pida.ui.window import SessionWindow
    import gtk

    view = SessionWindow(command=command)
    view.show_all()
    gtk.main()
    sys.exit(0)

from pida.core.options import OptionsManager
om = OptionsManager(session="default")

if environment.session_manager() or om.open_session_manager():
    open_session()

elif environment.session_set():
    for i in lst:
        pr = PidaRemote(i[0])
        try:    name = pr.call('sessions', 'get_session_name')
        except: name = "default"
        if name == environment.session_name():
            pr.call('buffer', 'open_files', file_names)
            sys.exit(0)
    spawn(None, session=environment.session_name()) 

elif len(lst) == 0:
    spawn(None)

elif len(lst) == 1:
    call_open(lst[0][0])

else:
    open_session()
